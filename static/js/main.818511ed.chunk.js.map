{"version":3,"sources":["config/keys.js","config/params.js","components/Poster.js","components/Cast.js","components/Plot.js","components/GameBar.js","components/GameContainer.js","components/MovieGetter.js","App.js","serviceWorker.js","index.js"],"names":["getEndpoint","endpoint","params","Poster","react_default","a","createElement","id","src","this","props","poster_src","alt","Component","Cast","genCast","cast_raw","_this","cast","i","length","actor","profile_path","push","character","name","pic_src","map","className","key","Plot","plot","GameBar","formatInfo","isFlop","target","rel","href","imdb","title","score","win","budget","revenue","GameContainer","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleWin","setState","state","currentWinPoints","winPoints","newMovie","handleLoss","lossPoints","userPick","flop","movie","wasFlop","prevMovie","castPoints","plotPoints","_this2","onClick","src_components_Poster","src_components_Cast","components_Plot","src_components_GameBar","imdb_id","MovieGetter","getNoOfPages","fetch","join","then","response","json","total_pages","getRandId","page","Math","floor","random","noOfPages","result","results","getMovie","getValidMovie","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","sent","console","log","abrupt","stop","getData","_callee2","data","_context2","loading","overview","poster_path","credits","slice","src_components_GameContainer","assign","App","components_MovieGetter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.818511ed.chunk.js","sourcesContent":["export const key = \"4d401448d79a8586637ecc6edc973fae\";\r\n\r\nexport const api_url = \"https://api.themoviedb.org/3\";\r\n\r\n\r\nexport const getEndpoint = (endpoint) => {\r\n    return api_url + endpoint + \"?api_key=\" + key\r\n}","export const params = [\r\n    \"&vote_count.gte=100\",\r\n]","import React, { Component } from 'react';\r\nimport './Poster.css'\r\n\r\n\r\nclass Poster extends Component {\r\n    render() {\r\n        return (\r\n            <div id=\"Poster\">\r\n                <img\r\n                    src={this.props.poster_src}\r\n                    alt=\"movie_poster\" />\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Poster;","import React, { Component } from 'react';\r\nimport './Cast.css'\r\n\r\nclass Cast extends Component {\r\n    genCast = () => {\r\n        let cast_raw = this.props.cast || [];\r\n        var cast = [];\r\n        for (let i=0; i<cast_raw.length; i++) {\r\n            let actor = cast_raw[i]\r\n            if (!actor.profile_path) {continue}\r\n            cast.push({\r\n                character: actor.character,\r\n                name: actor.name,\r\n                pic_src: \"https://image.tmdb.org/t/p/w200\" + actor.profile_path\r\n            })\r\n\r\n        }\r\n        return cast\r\n    }\r\n\r\n\r\n    render() {\r\n        var cast = this.genCast();\r\n        return (\r\n            <div id=\"castItemsContainer\">\r\n                {cast.map((actor) => {\r\n                    return (\r\n                        <div className=\"castItem\" key={actor.name}>\r\n                            <img \r\n                                src={actor.pic_src}\r\n                                alt=\"actor pic\" />\r\n                            <div className=\"castText\">\r\n                                <div>{actor.name}</div>\r\n                                <div>{actor.character}</div>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Cast;","import React, { Component } from 'react';\r\n\r\nclass Plot extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n               <p>{this.props.plot}</p> \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Plot;","import React, { Component } from 'react';\r\nimport './GameBar.css'\r\n\r\nclass GameBar extends Component {\r\n\r\n    formatInfo = () => {\r\n        if (this.props.isFlop) {\r\n            return (\r\n                <div>\r\n                <a target=\"_blank\" rel=\"noopener noreferrer\" \r\n                    href={\"https://www.imdb.com/title/\" + this.props.imdb}>\r\n                {this.props.title}\r\n                </a> was a flop!\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div>\r\n                <a target=\"_blank\" rel=\"noopener noreferrer\" \r\n                    href={\"https://www.imdb.com/title/\" + this.props.imdb}>\r\n                {this.props.title}\r\n                </a> was a success!\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"GameBar\">\r\n                <div id=\"Score\">\r\n                    <div>Score</div>\r\n                    <div>{this.props.score}</div>\r\n                </div>\r\n\r\n                <div id=\"RoundInfo\" className={this.props.win?\"win\":\"loss\"}>\r\n                    {this.formatInfo()}\r\n                    <div>Budget: {this.props.budget}</div>\r\n                    <div>Revenue: {this.props.revenue}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameBar;","import React, { Component } from 'react';\r\nimport Poster from './Poster'\r\nimport Cast from './Cast'\r\nimport Plot from './Plot'\r\nimport './GameContainer.css'\r\nimport GameBar from './GameBar';\r\n\r\nclass GameContainer extends Component {\r\n    constructor (props) {\r\n        super(props)\r\n        this.state = {\r\n            win: false,\r\n            wasFlop: false,\r\n            prevMovie: {},\r\n            score: 0,\r\n            winPoints: 10,\r\n            currentWinPoints: 10,\r\n            lossPoints: 10,\r\n            castPoints: 3,\r\n            plotPoints: 2,\r\n        }\r\n    }\r\n\r\n\r\n    handleWin = () => {\r\n        this.setState({\r\n            win: true,\r\n            score: this.state.score + this.state.currentWinPoints,\r\n            currentWinPoints: this.state.winPoints\r\n        })\r\n        this.props.newMovie()\r\n    }\r\n\r\n    handleLoss = () => {\r\n        this.setState({\r\n            win: false,\r\n            score: this.state.score - this.state.lossPoints,\r\n        })\r\n        this.props.newMovie()\r\n    }\r\n\r\n    userPick = (flop) => {\r\n        var isFlop = (this.props.movie.budget > this.props.movie.revenue)\r\n        this.setState({\r\n            wasFlop:isFlop,\r\n            prevMovie: this.props.movie\r\n        })\r\n        if (flop === isFlop) {\r\n            this.handleWin()\r\n        } else {\r\n            this.handleLoss()\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"GameContainer\">\r\n                <p>{this.state.score}</p>\r\n                <div className=\"button left\" \r\n                    onClick={()=>this.userPick(true)}>\r\n                    Flop\r\n                </div>\r\n                <div className=\"button right\" \r\n                    onClick={()=>this.userPick(false)}>\r\n                    Not\r\n                </div>\r\n                \r\n                <div id=\"posterContainer\">\r\n                    <Poster poster_src={this.props.movie.poster_src} />\r\n                </div>\r\n\r\n                <div id=\"castContainer\" className=\"hintContainer\">\r\n                    <Cast cast={this.props.movie.cast} />\r\n                </div>\r\n\r\n                <div id=\"hintContainer\" className=\"hintContainer\">\r\n                    <Plot plot={this.props.movie.plot} />\r\n                </div>\r\n\r\n                <GameBar\r\n                    title={this.state.prevMovie.title}\r\n                    imdb={this.state.prevMovie.imdb_id}\r\n                    isFlop={this.state.isFlop}\r\n                    win={this.state.win}\r\n                    score={this.state.score}\r\n                    revenue={this.state.prevMovie.revenue}\r\n                    budget={this.state.prevMovie.budget} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameContainer;","import React, { Component } from 'react';\r\nimport {getEndpoint} from '../config/keys';\r\nimport {params} from '../config/params';\r\n\r\nimport GameContainer from './GameContainer';\r\n\r\n\r\n\r\nclass MovieGetter extends Component {\r\n\r\n    constructor (props) {\r\n        super(props)\r\n        this.state = {\r\n            noOfPages: 1,\r\n            movie: {},\r\n            loading: true,\r\n        }\r\n    }\r\n\r\n    async componentDidMount () {\r\n        let noOfPages = await this.getNoOfPages()\r\n        await this.setState({noOfPages})\r\n        this.getData()\r\n    }\r\n\r\n    getNoOfPages = () => {\r\n        return fetch(getEndpoint('/discover/movie') + params.join(''))\r\n            .then( (response) => {\r\n                return response.json()\r\n            })\r\n            .then ( (json) => {\r\n                return json.total_pages\r\n            })\r\n    }\r\n\r\n    getRandId = () => {\r\n        let page = Math.floor(Math.random() * this.state.noOfPages) + 1\r\n        let result = Math.floor(Math.random() * 20)\r\n        return fetch(getEndpoint('/discover/movie') + params.join('') + '&page=' + page)\r\n            .then( (response) => {\r\n                return response.json()\r\n            })\r\n            .then ( (json) => {\r\n                return json.results[result].id\r\n            })\r\n    }\r\n\r\n    getMovie = (id) => {\r\n        return fetch(getEndpoint('/movie/'+ id) + \"&append_to_response=credits\")\r\n            .then( (response) => {\r\n                return response.json()\r\n            })\r\n            .then ( (json) => {\r\n                if (json.revenue > 0 && json.budget > 0) {\r\n                    return json\r\n                } else {\r\n                    return false\r\n                }\r\n            })\r\n    }\r\n\r\n    getValidMovie = async () => {\r\n        let id = await this.getRandId()\r\n        let movie = await this.getMovie(id)\r\n        if (movie) {\r\n            console.log(movie)\r\n            return movie\r\n        } else {\r\n            return this.getValidMovie()\r\n        }\r\n    }\r\n\r\n    getData = async () => {\r\n        this.setState({loading:true})\r\n        let movie = await this.getValidMovie()\r\n        var data = {\r\n            title: movie.title,\r\n            plot: movie.overview,\r\n            poster_src: \"https://image.tmdb.org/t/p/w500\" + movie.poster_path,\r\n            cast: movie.credits.cast.slice(0,5),\r\n            budget: movie.budget,\r\n            revenue: movie.revenue,\r\n            imdb_id: movie.imdb_id,\r\n        }\r\n        this.setState({\r\n            movie:data,\r\n            loading: false\r\n        })\r\n    }\r\n\r\n\r\n    \r\n    render() {\r\n        \r\n        return (\r\n            <div>\r\n                <GameContainer {...this.state} newMovie={this.getData} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MovieGetter;","import React, { Component } from 'react';\nimport MovieGetter from './components/MovieGetter';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <MovieGetter />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}